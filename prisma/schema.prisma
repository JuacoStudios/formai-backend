// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(uuid())
  email     String?  @unique
  createdAt DateTime @default(now())
  devices   Device[]
  subs      Subscription[]
  usages    UsageCounter[]

  @@map("users")
}

// Device-bound identity (cookie httpOnly). May or may not be linked to a User/email yet.
model Device {
  id        String   @id // same as cookie value (uuid v4)
  createdAt DateTime @default(now())
  user      User?    @relation(fields: [userId], references: [id])
  userId    String?
  // Optional: store lastSeen
  lastSeen  DateTime @default(now())
  mappings  DeviceMap[]
  usages    UsageCounter[]

  @@map("devices")
}

// Map Stripe objects to a device (and optionally user)
model DeviceMap {
  id        String   @id @default(uuid())
  provider  String
  key       String // e.g., "stripe:subscription:<subId>" or "stripe:customer:<custId>"
  device    Device  @relation(fields: [deviceId], references: [id])
  deviceId  String
  createdAt DateTime @default(now())

  @@unique([provider, key])
  @@map("device_maps")
}

model Subscription {
  id                     String    @id @default(uuid())
  provider               String
  providerCustomerId     String
  providerSubscriptionId String    @unique
  status                 String
  plan                   String? // 'month' | 'year' or similar
  currentPeriodEnd       DateTime?
  cancelAtPeriodEnd      DateTime?
  updatedAt              DateTime @updatedAt
  createdAt              DateTime @default(now())

  // link to user or device (at least one)
  user     User?   @relation(fields: [userId], references: [id])
  userId   String?
  device   Device? @relation(fields: [deviceId], references: [id])
  deviceId String?

  @@index([userId])
  @@index([deviceId])
  @@index([providerSubscriptionId])
  @@map("subscriptions")
}

model WebhookEvent {
  id         String   @id // provider event id (e.g., Stripe event.id)
  provider   String
  receivedAt DateTime @default(now())
  type       String
  payload    Json

  @@map("webhook_events")
}

// one-free-scan limiter per device (or per user if logged in)
model UsageCounter {
  id          String   @id @default(uuid())
  device      Device?  @relation(fields: [deviceId], references: [id])
  deviceId    String?
  user        User?    @relation(fields: [userId], references: [id])
  userId      String?
  scansUsed   Int      @default(0)
  periodStart DateTime @default(now()) // If you later reset periods
  updatedAt   DateTime @updatedAt
  createdAt   DateTime @default(now())

  @@index([deviceId])
  @@index([userId])
  @@map("usage_counters")
}
